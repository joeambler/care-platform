swagger: '2.0'
info:
  version: '0.0.0'
  title: Care Platform
  description: 'This is the API definition for the Care Platform.

  Authentication  Nodes:
  Click Authorize to enter User and Component authorization codes.

  - userAuth: The JWT token provided by the login command. Since the swagger 2.0 (OpenAPI) specification does
       not natively support bearer authentication. Please use this APIKey field. Prefix it with the word Bearer,
       like this: Bearer JWT_TOKEN
  - componentAuth: The key of the component, this can be obtained by making GET requests to .../components.'
host: localhost:10010
basePath: /v0
schemes:
- http
#s
consumes:
- application/json
produces:
- application/json
securityDefinitions:
   userAuth:
     type: apiKey
     in: header
     name: X-API-Key

   componentAuth:
     type: apiKey
     in: header
     name: X-API-Key

paths:
  /users:
    x-swagger-router-controller: users
    post:
      description: Create a new user with only basic details which can be later associated with a client
      summary: Create a new user
      tags:
      - user
      operationId: createUser
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: New user details
        schema:
          $ref: '#/definitions/UserWithPassword'
      responses:
        201:
          description: Successfully created
        406:
          description: Data is invalid
          schema:
            $ref: '#/definitions/ValidationError'

      
  /users/me:
    x-swagger-router-controller: users
  
    get:
      security:
      - userAuth: []
      description: Get basic details of your own user including, name, email address and password.
      summary: Get your own details on the platform
      tags:
      - user
      operationId: getUser
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        401:
          description: You have not logged in or an invalid or expired token has been supplied

    put:
      security:
      - userAuth: []
      description: Update basic details of your own user including, name, email address and password. Information for fields which should not be updated should not  be supplied.
      summary: Update your own user account once authenticated
      tags:
      - user
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: New user details
        schema:
          $ref: '#/definitions/UserWithPassword'
      responses:
        200:
          description: Successfully updated
        401:
          description: You have not logged in or an invalid or expired token has been supplied
        406:
          description: The input is not valid
      
    delete:
      security:
      - userAuth: []
      description: Delete your own user account. If you are the last user associated with a client, that client will also be deleted. You will need to be authenticated and provide your password in the body of the request to confirm the deletion.
      summary: Delete your own user account once authenticated
      tags:
      - user
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: Credentials Pair
        schema:
          $ref: '#/definitions/Credentials'
      responses:
        200:
          description: Successfully deleted
        401:
          description: You have not logged in or an invalid or expired token has been supplied
        404:
          description: User account no longer exists
        406:
          description: Invalid password supplied
      
  /users/login:
    x-swagger-router-controller: users
  
    post:
      description: Log in with your email address and password and obtain an  authorization token
      summary: User login
      tags:
      - user
      operationId: loginUser
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: Credentials Pair
        schema:
          $ref: '#/definitions/Credentials'
      responses:
        200:
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/JWT'
        401:
          description: Invalid credentials supplied
        404:
          description: User does not exist
      
  /users/passwordResetEmail:
    x-swagger-router-controller: users
  
    post:
      description: Specify email address to send a password reset email to the email  address of a registered user.
      summary: Send a password recovery email
      tags:
      - user
      operationId: sendPasswordResetEmail
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: Email address for an exisiting user
        schema:
          $ref: '#/definitions/UsersPasswordresetemailRequest'
      responses:
        200:
          description: Email Sent
        404:
          description: User does not exist
      
  /users/passwordReset:
    x-swagger-router-controller: users
    post:
      description: Using your email address, and temporary password reset code, provide a new password for your account.
      summary: Change your password using a temporary password reset code
      tags:
      - user
      operationId: usePasswordResetCode
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: New user details
        schema:
          $ref: '#/definitions/PasswordReset'
      responses:
        200:
          description: User account updated
        401:
          description: Invalid password reset code
        404:
          description: User does not exist
        406:
          description: New password is invalid

  /users/me/clients/tentative:
      x-swagger-router-controller: clients
      get:
        security:
        - userAuth: []
        description: Get all clients that are you have been invited to add to your account.
        summary: Get the tentative clients associated with your account
        tags:
        - client
        operationId: getUsersClientsTentative
        produces:
        - application/
        parameters: []
        responses:
          200:
            description: OK
            schema:
              type: array
              items:
                $ref: '#/definitions/ClientWithID'
          401:
            description: You aren't authorised to make this request

  /users/me/clients:
    x-swagger-router-controller: clients
    get:
      security: 
      - userAuth: [] 
      description: Get all clients that are associated with your user account.
      summary: Get the clients associated with your account
      tags:
      - client
      operationId: getUsersClients
      produces:
      - application/
      parameters: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ClientWithID'
        401:
          description: You aren't authorised to make this request

    post:
      security: 
      - userAuth: [] 
      description: The new user created from the information provided will be initially  associated with your account.
      summary: Create a new client associated with your account
      tags:
      - client
      operationId: postUsersClients
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: New client details
        schema:
          $ref: '#/definitions/Client'
      responses:
        201:
          description: Client was successfully created
          schema:
            $ref: '#/definitions/ClientWithID'
        401:
          description: You aren't authorised to make this change
        406:
          description: The data provided is not correct
      
  /users/me/clients/{clientID}:
    x-swagger-router-controller: clients
    delete:
      security: 
      - userAuth: [] 
      description: Remove the link between your account and the client specified in  the clientID. If you are the last user for the client, the client will also be deleted. You will need to provide your user credentials for this request.
      summary: Remove client from user account
      tags:
      - client
      operationId: deleteUserClient
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: ID of client to remove from account
      - name: body
        in: body
        required: true
        description: Credentials Pair
        schema:
          $ref: '#/definitions/Credentials'
      responses:
        200:
          description: Deleted
        401:
          description: You aren't authorised to make this request
        404:
          description: There is no client with this ID or you do not have permission to access it.
      
  /clients/{clientID}:
    x-swagger-router-controller: clients
    get:
      security:
      - userAuth: []
      description: Get client information by ID passed in path
      summary: Get client information by ID
      tags:
      - client
      operationId: getClient
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: ID of client to get
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ClientWithID'
        401:
          description: You aren't authorised to make this request
        404:
          description: There is no client with this ID or you do not have permission to access it.
      
    put:
      security:
      - userAuth: []
      description: Update basic details of the client, such as their name.  Information for fields which should not be updated should not be  supplied.
      summary: Update the information associated with a client.
      tags:
      - client
      operationId: updateClient
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: ID of client to get
      - name: body
        in: body
        required: true
        description: New client details
        schema:
          $ref: '#/definitions/Client'
      responses:
        201:
          description: Client was successfully updated
          schema:
            $ref: '#/definitions/ClientWithID'
        401:
          description: You aren't authorised to make this change
        406:
          description: The data provided is not correct
          
    delete:
      security:
      - userAuth: []
      description: Delete client with ID passed in path. You will need to provide your user credentials with this request.
      summary: Delete client by ID
      tags:
      - client
      operationId: deleteClient
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: ID of client to delete
      - name: body
        in: body
        required: true
        description: Credentials Pair
        schema:
          $ref: '#/definitions/Credentials'
      responses:
        200:
          description: Deleted
        401:
          description: You aren't authorised to make this request
        404:
          description: There is no client with this ID or you do not have permission to access it.

  /clients/{clientID}/share:
    x-swagger-router-controller: clients
    post:
      security:
      - userAuth: []
      description: Specify an existing user's email address to send an invitation to for  them to manage the client.
      summary: Invite user to access the client's data
      tags:
      - client
      operationId: shareClient
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: ID of client to share
      - name: body
        in: body
        required: true
        description: User to share the client with
        schema:
          $ref: '#/definitions/Invitation'
      responses:
        200:
          description: User was invited to manage this client.
        401:
          description: Invalid credentials supplied
        404:
          description: The client or user does not exist.

  /clients/{clientID}/accept:
    x-swagger-router-controller: clients
    post:
      security:
      - userAuth: []
      description: Accept a client that has been shared with you
      summary:  Accept a client that has been shared with you
      tags:
      - client
      operationId: acceptClient
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: ID of client to accept
      - name: body
        in: body
        required: true
        description: No body required
        schema:
          $ref: '#/definitions/Empty'
      responses:
        200:
          description: The client was accepted
        401:
          description: Invalid credentials supplied
        404:
          description: The client does not exist or is not tentative

  /clients/{clientID}/components:
    x-swagger-router-controller: components
    post:
      security:
      - userAuth: []
      description: Create a new component for this client, generating a key to be given to the component. 
      summary:  Register a new component
      tags:
      - client
      operationId: newComponent
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: ID of client to which the component should be added
      - name: body
        in: body
        required: true
        description: New component information
        schema:
          $ref: '#/definitions/NewComponent'
      responses:
        201:
          description: The component was created
          schema:
            $ref: '#/definitions/Component'
        401:
          description: Invalid credentials supplied
        404:
          description: The client does not exist
          
    get:
      security:
      - userAuth: []
      description: See the components associated with this client 
      summary:  Get client's components
      tags:
      - client
      operationId: getComponents
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: Get the components of this client
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Component'
        401:
          description: Invalid credentials supplied
        404:
          description: The client does not exist
        
  /clients/{clientID}/components/{componentID}:
    x-swagger-router-controller: components
    get:
      security:
      - userAuth: []
      description: See a specific component of a client
      summary:  Get a single component of the client
      tags:
      - client
      operationId: getComponentById
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: Get the components of this client
      - name: componentID
        in: path
        required: true
        type: integer
        description: The component to get
      responses:
        200:
          description: OK
          schema:
           $ref: '#/definitions/Component'
        401:
          description: Invalid credentials supplied
        404:
          description: The client or component does not exist
          
    delete:
      security:
      - userAuth: []
      description: Delete a component of a client
      summary:  Delete a single component of the client
      tags:
      - client
      operationId: deleteComponentById
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: Get the components of this client
      - name: componentID
        in: path
        required: true
        type: integer
        description: The component to delete
      responses:
        200:
          description: OK
        401:
          description: Invalid credentials supplied
        404:
          description: The client or component does not exist
          
  

  /clients/{clientID}/components/{componentID}/permissions:
    x-swagger-router-controller: permissions
    get:
      security:
      - userAuth: []
      description: If this compoent has any accepted permssions, you can get them here.
      summary:  See the permissions the component has been granted.
      tags:
      - client
      operationId: getPermissions
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: Get the components of this client
      - name: componentID
        in: path
        required: true
        type: integer
        description: The component to get
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
        401:
          description: Invalid credentials supplied
        404:
          description: The client or component does not exist, or you are not the client's admin.
  
  /clients/{clientID}/components/{componentID}/permissions/requested:
    x-swagger-router-controller: permissions
    get:
      security:
      - userAuth: []
      description: If the component has requested any new permissions, you can get them here.
      summary:  See the permissions the component has requested
      tags:
      - client
      operationId: getRequestedPermissions
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: Get the components of this client
      - name: componentID
        in: path
        required: true
        type: integer
        description: The component to get
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
        401:
          description: Invalid credentials supplied
        404:
          description: The client or component does not exist, or you are not the client's admin.
  
  /clients/{clientID}/components/{componentID}/permissions/accept:
    x-swagger-router-controller: permissions
    post:
      security:
      - userAuth: []
      description: Accept permissions that where requested by the component
      summary:  Accept permissions that where requested by the component
      tags:
      - client
      operationId: acceptPermissions
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: Get the components of this client
      - name: componentID
        in: path
        required: true
        type: integer
        description: The component to get
      - name: body
        in: body
        required: true
        description: List of permissions to accept
        schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
      responses:
        200:
          description: Permissions were accepted
        400:
          description: Permission(s) not requested or already accepted
          schema:
              type: array
              items:
                $ref: '#/definitions/Permission'
        401:
          description: Invalid credentials supplied
        404:
          description: The client or component does not exist, or you are not the client's admin.

  /clients/{clientID}/components/{componentID}/permissions/revoke:
    x-swagger-router-controller: permissions
    post:
      security:
      - userAuth: []
      description: Revoke previously accepted permissions.
      summary:  Revoke previously accepted permissions
      tags:
      - client
      operationId: revokePermissions
      produces:
      - application/json
      parameters:
      - name: clientID
        in: path
        required: true
        type: integer
        description: Get the components of this client
      - name: componentID
        in: path
        required: true
        type: integer
        description: The component to get
      - name: body
        in: body
        required: true
        description: List of permissions to revoke
        schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
      responses:
        200:
          description: Permissions were revoked
        400:
          description: Permission were not accepted anyway
          schema:
              type: array
              items:
                $ref: '#/definitions/Permission'
        401:
          description: Invalid credentials supplied
        404:
          description: The client or component does not exist, or you are not the client's admin.

  /clients/{clientID}/components/{componentID}/events:
      x-swagger-router-controller: events
      get:
        security:
        - userAuth: []
        description: Get events from this component
        summary:  Get events from this component
        tags:
        - client
        operationId: getComponentEvents
        produces:
        - application/json
        parameters:
        - name: clientID
          in: path
          required: true
          type: integer
          description: Get the components of this client
        - name: componentID
          in: path
          required: true
          type: integer
          description: Get events from this component
        responses:
          200:
            description: Events
            schema:
              type: array
              items:
                type: object
                required:
                - type
                - deviceInstance
                - details
                properties:
                  type:
                    type: string
                    example: 'Opened'
                  details:
                    type: string
                    example: 'The pill box was opened'
                  deviceInstance:
                    $ref: '#/definitions/DeviceInstance'
          401:
            description: Invalid credentials supplied
          404:
            description: The client or component does not exist
  
  /components/requestPermissions:
    x-swagger-router-controller: permissions
    post:
      security:
      - componentAuth: []
      description: Request permissions. You should specify device defintions for any device permissions required. 
      summary:  Request permissions and define new devices
      tags:
      - component
      operationId: requestPermissions
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: List of permissions and defitions for any devices you wish to use
        schema:
          type: object
          properties:
            permissions:
              type: array
              items:
                $ref: '#/definitions/Permission'
            deviceDefinitions:
              type: array
              items:
                $ref: '#/definitions/DeviceDefinition'
      responses:
        200:
          description: Permissions were sent
        400:
          description: Device already exists with a different prototype
        401:
          description: The component key you supplied is invalid

  /components/events:
    x-swagger-router-controller: events
    post:
      security:
      - componentAuth: []
      description: 'You should include information on the device that has emitted it, along with its event type and
      any extra details'
      summary:  Send an information on a new event
      tags:
      - component
      operationId: postEvent
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: Event
        schema:
          type: object
          required:
          - type
          - deviceInstance
          - details
          properties:
            type:
              type: string
              example: 'Opened'
            details:
              type: string
              example: 'The pill box was opened'
            deviceInstance:
              $ref: '#/definitions/DeviceInstance'
      responses:
        200:
          description: The event was recieved correctly
        401:
          description: 'The component key you supplied is invalid, or the user has not granted the required
          permissions to post this event.'


definitions:
#defintions for clients and users
  UserWithPassword:
    title: UserWithPassword
    type: object
    properties:
      name:
        $ref: '#/definitions/Name'
      email:
        example: carer@example.com
        type: string
      password:
        example: password
        type: string
  Name:
    title: Name
    type: object
    properties:
      title:
        example: Dr
        type: string
      firstNames:
        example: Grace
        type: string
      surnames:
        example: Hopper
        type: string
  User:
    title: User
    type: object
    properties:
      name:
        $ref: '#/definitions/Name'
      email:
        example: carer@example.com
        type: string
  Credentials:
    title: Credentials
    type: object
    properties:
      email:
        example: carer@example.com
        type: string
      password:
        example: password
        type: string
    required:
    - email
    - password
  JWT:
    title: JWT
    type: object
    properties:
      token:
        description: JSON Web Token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ.eyJlbWFpbCI6Im9sYXR1bmRlZ2FydWJhQGdtYWlsLmNvbSIsImZ1bGxOYW1lIjoiT2xhdHVuZGUgR2FydWJhIiwiX2lkIjoiNThmMjYzNDdiMTY1YzUxODM1NDMxYTNkIiwiaW F0IjoxNDkyMjgwMTk4fQ.VcMpybz08cB5PsrMSr25En4_EwCGWZVFgciO4M3ENE
        type: string
  UsersPasswordresetemailRequest:
    title: Users PasswordResetEmail Request
    type: object
    properties:
      email:
        example: carer@example.com
        type: string
  PasswordReset:
    title: PasswordReset
    type: object
    properties:
      email:
        example: carer@example.com
        type: string
      code:
        example: SA92JS9a029384JASKJN
        type: string
      newPassword:
        example: password
        type: string
    required:
    - email
    - code
    - newPassword
  ClientWithID:
    title: ClientWithID
    type: object
    properties:
      id:
        type: integer
      name:
        $ref: '#/definitions/Name'
  Client:
    title: Client
    type: object
    properties:
      name:
        $ref: '#/definitions/Name'
    required:
    - name
  Invitation:
    title: Invitation
    type: object
    properties:
      email:
        example: carer@example.com
        type: string
      admin:
        example: false
        type: boolean
    required:
    - email
    - admin
    #component defintions

  NewComponent:
    title: Component to create
    type: object
    properties:
      type:
        type: string
        enum: 
        - event
        - model
        example: event
      name: 
        type: string
        example: Pill Box
      apiEndPoint:
        type: string
        example: pillboxexample.com/api
    required:
    - name
    - type
    
  Component:
    title: Component
    type: object
    allOf:
    - $ref: '#/definitions/NewComponent'
    properties:
      id:
        type: integer
        example: 0
      key:
        type: string
        example: pJN2GqumRbOmtNuCgKlhxjDgRWepazFGuCiikGcizc3GtUM9d8MXz5LCfEI0DjS0HzeiWODd9VGCjcTenttVnsCxG4RH1Sj1QMHe
    required:
    - id
    - key
    - type

  Permission:
    type: object
    title: Component Permission
    properties:
      type:
        type: string
        enum:
        - event
        - device
        - alert
        example: 'device'
      name:
        type: string
        example: "Pill Box"
    required:
    - type
    - name
    
  DeviceDefinition:
    type: object
    title: Device Definition
    properties:
      type:
        type: string
        example: Pill Box
      prototype:
        type: string
        example: "{\"location\": \"string\"}"
    required:
    - type
    - prototype

  DeviceInstance:
    type: object
    title: Device Instance
    properties:
      type:
        type: string
        example: Pill Box
      properties:
        type: string
        example: "{\"location\": \"Kitchen\"}"
    required:
    - type
    - properties
        
    #other definitions
  Empty:
      title: empty
      type: object

  ValidationError:
   title: Validation Error
   type: string
   example: "User already exists"
